from django import template
from ..models import Post
from django.db.models import Count
from django.utils.safestring import mark_safe
import markdown

register = template.Library() # each template tags module needs to contain a variable called register to be a valid tag library
#This variable is an instance of template.Library, and it's used to register our own template tags and filters

#we define a tag called total_posts with a Python function and use the @register.simple_tag decorator to register the
#function as a simple tag. Django will use the function's name as the tag name
#If you want to register it using a different name, you can do it by specifying a name attribute, such as @register.simple_tag(name='my_tag').
@register.simple_tag
def total_posts():
    return Post.published.count()
# =============================================================================
# another tag to display the latest posts in the sidebar of our blog
# =============================================================================
#using @register.inclusion_tag and specify the template that has to be rendered with the returned values using blog/post/latest_posts.html
#Our template tag will accept an optional count parameter that defaults to 5. 
#This parameter allows us to specify the number of posts we want to display. We use this variable to limit the results of the
#query Post.published.order_by('-publish')[:count]. Note that the function returns a dictionary of variables instead of a simple value. Inclusion
#tags have to return a dictionary of values, which is used as the context to render the specified template. The template tag we just
#created allows you to specify the optional number of posts to display as {% show_latest_posts 3 %}.

@register.inclusion_tag('blog/post/latest_posts.html') 
def show_latest_posts(count=5):
    latest_posts = Post.published.order_by('-publish')[:count]
    return {'latest_posts': latest_posts}

# =============================================================================
# most commented posts
# =============================================================================
    
#build a QuerySet using the annotate() function to aggregate the total number of comments for
#each post. We use the Count aggregation function to store the number
#of comments in the computed field total_comments for each Post object.
#We order the QuerySet by the computed field in descending order.
#We also provide an optional count variable to limit the total number
#of objects returned

@register.simple_tag
def get_most_commented_posts(count=5):
    return Post.published.annotate(
            total_comments=Count('comments')
            ).order_by('-total_comments')[:count]
    
#We register template filters in the same way as template tags. To
#avoid a collision between our function name and the markdown module,
#we name our function markdown_format and name the filter markdown for
#usage in templates, such as {{ variable|markdown }}. Django escapes the
#HTML code generated by filters. We use the mark_safe function
#provided by Django to mark the result as safe HTML to be rendered
#in the template. By default, Django will not trust any HTML code
#and will escape it before placing it in the output. The only
#exceptions are variables that are marked as safe from escaping. This
#behavior prevents Django from outputting potentially dangerous
#HTML and allows you to create exceptions for returning safe
#HTML.
    
@register.filter(name='markdown')
def markdown_format(text):
    return mark_safe(markdown.markdown(text))